// Game variables
let gameSequence = []; // Stores the sequence generated by the game
let userSequence = []; // Stores the sequence entered by the user
let gameStarted = false; // Tracks if the game has started
let level = 0; // Current game level
let score = 0; // Current user score
let buttons = ["yellow", "green", "red", "purple"]; // Button color options
let audio = new Audio("lost.wav"); // Load an audio file

// HTML element to display game status
let h2 = document.querySelector("h2");

// Event listener to start the game on key press
document.addEventListener("keypress", function() {
    if (!gameStarted) {
        console.log("Game Started");
        gameStarted = true;
        setTimeout(levelUp, 250); // Start game after slight delay
    }
});

// Function to create a flash effect on a button (for game sequence display)
function btnFlash(button) {
    button.classList.add("flash");
    setTimeout(() => {
        button.classList.remove("flash");
    }, 250); // Remove flash effect after 250 ms
}

// Function to create a user flash effect on button click
function userFlash(button) {
    button.classList.add("uflash");
    setTimeout(() => {
        button.classList.remove("uflash");
    }, 250); // Remove user flash effect after 250 ms
}

// Function to advance to the next level
function levelUp() {
    userSequence = []; // Reset user sequence for new level
    level++; // Increase level
    h2.innerText = `Level ${level}`; // Update level display
    let index = Math.floor(Math.random() * 4); // Randomly select button
    let buttonColor = buttons[index];
    gameSequence.push(buttonColor); // Add new color to game sequence
    //console.log(gameSequence); // Log the sequence for debugging
    let buttonElement = document.querySelector(`.${buttonColor}`);
    btnFlash(buttonElement); // Flash the new button in sequence
}

// Function to reset game variables after game over
function resetGame() {
    gameSequence = [];
    userSequence = [];
    gameStarted = false;
    level = 0;
    score = 0;
}

// Function to check user input sequence against the game sequence
function checkSequence(index) {
    if (userSequence[index] === gameSequence[index]) {
        // If user sequence matches the game sequence so far
        if (userSequence.length === gameSequence.length) {
            score += level; // Increase score by current level
            setTimeout(levelUp, 1000); // Go to next level after delay
        }
    } else {
        // If user sequence does not match
        alertUser(); // Alert user visually
        h2.innerHTML = `Game Over! Your Score Was <b>${score}</b> <br><i>Press any key to restart!</i>`;
        resetGame(); // Reset the game
    }
}

// Function to visually alert the user on game over
function alertUser() {
    let body = document.querySelector("body");
    body.style.backgroundColor = "rgba(255, 0, 0, 0.6)"; // Flash red for error
    audio.play(); // Play the sound
    setTimeout(() => {
        body.style.backgroundColor = "white"; // Reset background color
    }, 150);
}

// Function to handle button press by the user
function handleButtonPress() {
    userFlash(this); // Flash button for user feedback
    let color = this.classList[1]; // Get the button color
    userSequence.push(color); // Add color to user sequence
    //console.log(userSequence); // Log user sequence for debugging
    checkSequence(userSequence.length - 1); // Check current sequence position
}

// Add event listeners to each button for user clicks
let buttonElements = document.querySelectorAll(".btn");
for (let button of buttonElements) {
    button.addEventListener("click", handleButtonPress);
}
